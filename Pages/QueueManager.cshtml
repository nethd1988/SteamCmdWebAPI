@page
@model QueueManagerModel
@{
    ViewData["Title"] = "Quản lý hàng đợi";
    ViewData["ActivePage"] = "QueueManager";
}

@using SteamCmdWebAPI.Services
@using System.Globalization
@using System.IO

@{
    // Extension methods for QueueItem
    string GetFormattedCreatedAt(QueueService.QueueItem item)
    {
        return item.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss");
    }

    string GetFormattedStartedAt(QueueService.QueueItem item)
    {
        return item.StartedAt.HasValue ? item.StartedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-";
    }

    string GetFormattedCompletedAt(QueueService.QueueItem item)
    {
        return item.CompletedAt.HasValue ? item.CompletedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-";
    }
}

<style>
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
    }
    
    .status-badge.waiting {
        background-color: #f8f9fa;
        color: #6c757d;
    }
    
    .status-badge.processing {
        background-color: #cfe2ff;
        color: #084298;
    }
    
    .status-badge.success {
        background-color: #d1e7dd;
        color: #0f5132;
    }
    
    .status-badge.error {
        background-color: #f8d7da;
        color: #842029;
    }
    
    .status-badge.cancelled {
        background-color: #fff3cd;
        color: #664d03;
    }
    
    .status-badge i {
        margin-right: 0.25rem;
    }
</style>

<div class="page-header d-flex justify-content-between align-items-center">
    <h1>Quản lý hàng đợi cập nhật</h1>
    <div class="header-actions">
        <button id="checkUpdatesBtn" class="btn-action btn-primary" type="button">
            <i class="bi bi-cloud-download"></i> Kiểm tra cập nhật
        </button>
        <button id="processQueueBtn" class="btn-action btn-success" type="button" @(Model.IsProcessing ? "disabled" : "")>
            <i class="bi bi-play-fill"></i> Xử lý hàng đợi
        </button>
        <button id="stopQueueBtn" class="btn-action btn-danger" type="button" @(!Model.IsProcessing ? "disabled" : "")>
            <i class="bi bi-stop-fill"></i> Dừng xử lý
        </button>
        <button id="clearQueueBtn" class="btn-action btn-secondary" type="button">
            <i class="bi bi-trash"></i> Xóa hàng đợi
        </button>
    </div>
</div>

<form id="csrfForm" method="post" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<!-- Console for log output -->
<div class="console-container">
    <div class="console-header">
        <h5>Log cập nhật</h5>
        <div class="console-controls">
            <button class="btn-icon" id="toggleAutoScrollBtn" title="Tự động cuộn" type="button">
                <i class="bi bi-arrow-down-square"></i>
            </button>
            <button class="btn-icon" id="clearConsoleBtn" title="Xóa console" type="button">
                <i class="bi bi-eraser"></i>
            </button>
        </div>
    </div>
    <div class="console-body" id="steamcmd-console"></div>
</div>

<!-- Bảng hàng đợi hiện tại -->
<div class="table-container mt-4">
    <div class="table-header">
        <h5>Hàng đợi hiện tại</h5>
        <div class="search-box">
            <input type="text" id="queueSearch" placeholder="Tìm kiếm...">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="table-responsive">
        <table id="queueTable" class="table">
            <thead>
                <tr>
                    <th>STT</th>
                    <th>App</th>
                    <th>Thời gian thêm</th>
                    <th>Bắt đầu</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CurrentQueue)
                {
                    <tr data-id="@item.Id" class="@GetRowClass(item.Status)">
                        <td>@item.Order</td>
                        <td>
                            <span title="AppID: @item.AppId">@item.AppName</span>
                        </td>
                        <td>@GetFormattedCreatedAt(item)</td>
                        <td>@GetFormattedStartedAt(item)</td>
                        <td>
                            <span class="status-badge @GetStatusClass(item.Status)">
                                <i class="bi @GetStatusIcon(item.Status)"></i>
                                @item.Status
                            </span>
                        </td>
                        <td>
                            @if (item.Status == "Đang chờ")
                            {
                                <button class="btn-icon delete remove-queue-btn" type="button" data-id="@item.Id" title="Xóa khỏi hàng đợi">
                                    <i class="bi bi-trash"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
                @if (!Model.CurrentQueue.Any())
                {
                    <tr>
                        <td colspan="6" class="text-center">Không có mục nào trong hàng đợi.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Chỉnh sửa bảng lịch sử cập nhật -->
<div class="card mt-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Lịch sử cập nhật</h5>
        <div class="search-box">
            <input type="text" id="historySearch" placeholder="Tìm kiếm lịch sử...">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="historyTable">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>App</th>
                        <th>Thời gian thêm</th>
                        <th>Bắt đầu</th>
                        <th>Hoàn thành</th>
                        <th>Trạng thái</th>
                    </tr>
                </thead>
                <tbody id="historyTableBody">
                    @foreach (var item in Model.QueueHistory.OrderByDescending(h => h.CompletedAt ?? h.CreatedAt))
                    {
                        <tr>
                            <td>@(Model.QueueHistory.IndexOf(item) + 1)</td>
                            <td><span title="AppID: @item.AppId">@item.AppName</span></td>
                            <td>@GetFormattedCreatedAt(item)</td>
                            <td>@GetFormattedStartedAt(item)</td>
                            <td>@GetFormattedCompletedAt(item)</td>
                            <td>
                                <span class="status-badge @GetStatusClass(item.Status)">
                                    <i class="bi @GetStatusIcon(item.Status)"></i>
                                    @item.Status
                                </span>
                            </td>
                        </tr>
                    }
                    @if (!Model.QueueHistory.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center">Không có mục nào trong lịch sử</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@functions {
    string GetRowClass(string status)
    {
        return status switch
        {
            "Đang xử lý" => "table-primary",
            "Hoàn thành" => "table-success",
            "Lỗi" => "table-danger",
            "Đã hủy" => "table-warning",
            _ => ""
        };
    }

    string GetStatusClass(string status)
    {
        return status switch
        {
            "Đang chờ" => "waiting",
            "Đang xử lý" => "processing",
            "Hoàn thành" => "success",
            "Lỗi" => "error",
            "Đã hủy" => "cancelled",
            _ => ""
        };
    }

    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Đang chờ" => "bi-hourglass-split",
            "Đang xử lý" => "bi-arrow-repeat",
            "Hoàn thành" => "bi-check-circle",
            "Lỗi" => "bi-exclamation-triangle",
            "Đã hủy" => "bi-x-circle",
            _ => "bi-question-circle"
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Lấy CSRF token từ form
            var token = $('#csrfForm input[name="__RequestVerificationToken"]').val();

            // Khởi tạo SignalR connection cho cập nhật hàng đợi
            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/logHub")
                .withAutomaticReconnect([0, 1000, 5000, 10000])
                .configureLogging(signalR.LogLevel.Error)
                .build();

            // Sự kiện nhận cập nhật hàng đợi
            connection.on("ReceiveQueueUpdate", function(data) {
                updateQueueTable(data.currentQueue);
                updateHistoryTable(data.queueHistory);
            });

            connection.start()
                .then(function() {
                    console.log("Đã kết nối với server");
                    // Yêu cầu cập nhật hàng đợi
                    connection.invoke("RequestQueueUpdate");
                })
                .catch(function(err) {
                    console.error("Lỗi kết nối SignalR:", err);
                });

            // Tự động cập nhật hàng đợi mỗi 10 giây
            setInterval(function() {
                $.ajax({
                    url: "/QueueManager?handler=UpdateQueueStatus",
                    method: "GET",
                    success: function(response) {
                        if (response.success) {
                            updateQueueTable(response.currentQueue);
                            updateHistoryTable(response.queueHistory);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Lỗi khi cập nhật hàng đợi:", error);
                    }
                });
            }, 10000);

            // Hàm hỗ trợ định dạng ngày giờ
            function formatDateTime(date) {
                if (!(date instanceof Date) || isNaN(date)) return "N/A";
                
                var day = date.getDate().toString().padStart(2, '0');
                var month = (date.getMonth() + 1).toString().padStart(2, '0');
                var year = date.getFullYear();
                var hours = date.getHours().toString().padStart(2, '0');
                var minutes = date.getMinutes().toString().padStart(2, '0');
                var seconds = date.getSeconds().toString().padStart(2, '0');
                
                return day + "/" + month + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
            }
            
            // Hàm hỗ trợ lấy class cho trạng thái
            function getStatusClass(status) {
                switch(status) {
                    case "Đang chờ": return "waiting";
                    case "Đang xử lý": return "processing";
                    case "Hoàn thành": return "success";
                    case "Lỗi": return "error";
                    case "Đã hủy": return "cancelled";
                    default: return "";
                }
            }

            // Hàm hỗ trợ lấy icon cho trạng thái
            function getStatusIcon(status) {
                switch(status) {
                    case "Đang chờ": return "bi-hourglass-split";
                    case "Đang xử lý": return "bi-arrow-repeat";
                    case "Hoàn thành": return "bi-check-circle";
                    case "Lỗi": return "bi-exclamation-triangle";
                    case "Đã hủy": return "bi-x-circle";
                    default: return "bi-question-circle";
                }
            }

            // Thêm hàm để lấy class CSS tương ứng với trạng thái
            function getRowClass(status) {
                switch(status) {
                    case "Đang xử lý": return "table-primary";
                    case "Hoàn thành": return "table-success";
                    case "Lỗi": return "table-danger";
                    case "Đã hủy": return "table-warning";
                    default: return "";
                }
            }

            // Cập nhật hàm updateQueueTable để sử dụng các hàm định dạng thay vì thuộc tính
            function updateQueueTable(queueItems) {
                var tableBody = $("#queueTable tbody");
                tableBody.empty();
                
                if (queueItems && queueItems.length > 0) {
                    queueItems.forEach(function(item) {
                        var row = $("<tr>");
                        row.attr("data-id", item.id);
                        row.addClass(getRowClass(item.status));
                        
                        // STT
                        row.append($("<td>").text(item.order));
                        
                        // Tên app (với tooltip hiển thị AppID)
                        var appCell = $("<td>");
                        var appSpan = $("<span>").attr("title", "AppID: " + item.appId).text(item.appName);
                        appCell.append(appSpan);
                        row.append(appCell);
                        
                        // Thời gian thêm
                        var createdTime = new Date(item.createdAt);
                        row.append($("<td>").text(formatDateTime(createdTime)));
                        
                        // Thời gian bắt đầu
                        var startedTime = item.startedAt ? new Date(item.startedAt) : null;
                        row.append($("<td>").text(startedTime ? formatDateTime(startedTime) : "-"));
                        
                        // Trạng thái
                        var statusCell = $("<td>");
                        var statusClass = getStatusClass(item.status);
                        var statusIcon = getStatusIcon(item.status);
                        
                        var statusBadge = $("<span>")
                            .addClass("status-badge " + statusClass)
                            .append($("<i>").addClass("bi " + statusIcon))
                            .append(" " + item.status);
                        
                        statusCell.append(statusBadge);
                        row.append(statusCell);
                        
                        // Thao tác
                        var actionsCell = $("<td>");
                        if (item.status === "Đang chờ") {
                            var removeButton = $("<button>")
                                .addClass("btn-icon delete remove-queue-btn")
                                .attr("title", "Xóa khỏi hàng đợi")
                                .attr("data-id", item.id)
                                .append($("<i>").addClass("bi bi-trash"));
                                
                            removeButton.click(function() {
                                removeFromQueue(item.id);
                            });
                            
                            actionsCell.append(removeButton);
                        }
                        row.append(actionsCell);
                        
                        tableBody.append(row);
                    });
                } else {
                    tableBody.append(
                        $("<tr>").append(
                            $("<td>").attr("colspan", "6").addClass("text-center").text("Không có mục nào trong hàng đợi")
                        )
                    );
                }
            }

            // Cập nhật hàm updateHistoryTable để sử dụng các hàm định dạng thay vì thuộc tính
            function updateHistoryTable(historyItems) {
                var tableBody = $("#historyTableBody");
                tableBody.empty();
                
                if (historyItems && historyItems.length > 0) {
                    // Sắp xếp theo thời gian hoàn thành hoặc thời gian tạo (giảm dần)
                    historyItems.sort(function(a, b) {
                        var timeA = a.completedAt || a.createdAt;
                        var timeB = b.completedAt || b.createdAt;
                        return new Date(timeB) - new Date(timeA);
                    });
                    
                    historyItems.forEach(function(item, index) {
                        var row = $("<tr>");
                        
                        // Số thứ tự
                        row.append($("<td>").text(index + 1));
                        
                        // Tên app (với tooltip hiển thị AppID)
                        var appCell = $("<td>");
                        var appSpan = $("<span>").attr("title", "AppID: " + item.appId).text(item.appName);
                        appCell.append(appSpan);
                        row.append(appCell);
                        
                        // Thời gian thêm
                        var createdTime = item.createdAt ? new Date(item.createdAt) : null;
                        row.append($("<td>").text(createdTime ? formatDateTime(createdTime) : "N/A"));
                        
                        // Thời gian bắt đầu
                        var startTime = item.startedAt ? new Date(item.startedAt) : null;
                        row.append($("<td>").text(startTime ? formatDateTime(startTime) : "N/A"));
                        
                        // Thời gian hoàn thành
                        var completeTime = item.completedAt ? new Date(item.completedAt) : null;
                        row.append($("<td>").text(completeTime ? formatDateTime(completeTime) : "N/A"));
                        
                        // Trạng thái
                        var statusCell = $("<td>");
                        var statusClass = getStatusClass(item.status);
                        var statusIcon = getStatusIcon(item.status);
                        
                        var statusBadge = $("<span>")
                            .addClass("status-badge " + statusClass)
                            .append($("<i>").addClass("bi " + statusIcon))
                            .append(" " + item.status);
                        
                        statusCell.append(statusBadge);
                        row.append(statusCell);
                        
                        tableBody.append(row);
                    });
                } else {
                    tableBody.append(
                        $("<tr>").append(
                            $("<td>").attr("colspan", "6").addClass("text-center").text("Không có mục nào trong lịch sử")
                        )
                    );
                }
            }

            // Hàm xóa khỏi hàng đợi
            function removeFromQueue(id) {
                if (confirm("Bạn có chắc chắn muốn xóa mục này khỏi hàng đợi?")) {
                    var token = $('input[name="__RequestVerificationToken"]').val();
                    
                    $.ajax({
                        url: "/QueueManager?handler=RemoveFromQueue",
                        method: "POST",
                        data: { id: id, __RequestVerificationToken: token },
                        success: function(response) {
                            if (response.success) {
                                // Yêu cầu cập nhật lại hàng đợi
                                connection.invoke("RequestQueueUpdate");
                            } else {
                                alert("Lỗi: " + response.message);
                            }
                        },
                        error: function(xhr, status, error) {
                            alert("Lỗi khi xóa khỏi hàng đợi: " + error);
                        }
                    });
                }
            }

            // Tìm kiếm trong bảng hàng đợi
            $("#queueSearch").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $("#queueTable tbody tr").filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            // Tìm kiếm cho bảng lịch sử
            $("#historySearch").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $("#historyTable tbody tr").filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            // Xử lý nút Kiểm tra cập nhật
            $("#checkUpdatesBtn").click(function() {
                $(this).prop("disabled", true).html('<i class="bi bi-hourglass-split me-1"></i> Đang kiểm tra...');

                $.ajax({
                    url: "/UpdateManagement?handler=CheckUpdates",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast(response.message, "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể kiểm tra cập nhật"), "danger");
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi khi kiểm tra cập nhật: " + error, "danger");
                    },
                    complete: function() {
                        $("#checkUpdatesBtn").prop("disabled", false).html('<i class="bi bi-cloud-download"></i> Kiểm tra cập nhật');
                    }
                });
            });

            // Xử lý nút Xử lý hàng đợi
            $("#processQueueBtn").click(function() {
                $(this).prop("disabled", true);
                $("#stopQueueBtn").prop("disabled", false);

                $.ajax({
                    url: "/QueueManager?handler=StartProcessing",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã bắt đầu xử lý hàng đợi", "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể bắt đầu xử lý hàng đợi"), "danger");
                            $("#processQueueBtn").prop("disabled", false);
                            $("#stopQueueBtn").prop("disabled", true);
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                        $("#processQueueBtn").prop("disabled", false);
                        $("#stopQueueBtn").prop("disabled", true);
                    }
                });
            });

            // Xử lý nút Dừng xử lý
            $("#stopQueueBtn").click(function() {
                $(this).prop("disabled", true);

                $.ajax({
                    url: "/QueueManager?handler=StopProcessing",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã dừng xử lý hàng đợi", "success");
                            $("#processQueueBtn").prop("disabled", false);
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể dừng xử lý hàng đợi"), "danger");
                            $("#stopQueueBtn").prop("disabled", false);
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                        $("#stopQueueBtn").prop("disabled", false);
                    }
                });
            });

            // Xử lý nút Xóa hàng đợi
            $("#clearQueueBtn").click(function() {
                if (confirm("Bạn có chắc chắn muốn xóa tất cả các mục đang chờ trong hàng đợi không?")) {
                    $.ajax({
                        url: "/QueueManager?handler=ClearQueue",
                        method: "POST",
                        headers: {
                            "RequestVerificationToken": token
                        },
                        success: function(response) {
                            if (response.success) {
                                showToast("Đã xóa hàng đợi", "success");
                            } else {
                                showToast("Lỗi: " + (response.message || "Không thể xóa hàng đợi"), "danger");
                            }
                        },
                        error: function(xhr, status, error) {
                            showToast("Lỗi: " + error, "danger");
                        }
                    });
                }
            });

            // Xử lý nút Xóa khỏi hàng đợi
            $(document).on("click", ".remove-queue-btn", function() {
                var id = $(this).data("id");
                
                $.ajax({
                    url: "/QueueManager?handler=RemoveFromQueue",
                    method: "POST",
                    data: { id: id },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã xóa khỏi hàng đợi", "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể xóa khỏi hàng đợi"), "danger");
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                    }
                });
            });
        });
    </script>
}