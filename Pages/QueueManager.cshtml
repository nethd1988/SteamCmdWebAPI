@page
@model QueueManagerModel
@{
    ViewData["Title"] = "Quản lý hàng đợi";
    ViewData["ActivePage"] = "QueueManager";
}

<div class="page-header d-flex justify-content-between align-items-center">
    <h1>Quản lý hàng đợi cập nhật</h1>
    <div class="header-actions">
        <button id="checkUpdatesBtn" class="btn-action btn-primary" type="button">
            <i class="bi bi-cloud-download"></i> Kiểm tra cập nhật
        </button>
        <button id="processQueueBtn" class="btn-action btn-success" type="button" @(Model.IsProcessing ? "disabled" : "")>
            <i class="bi bi-play-fill"></i> Xử lý hàng đợi
        </button>
        <button id="stopQueueBtn" class="btn-action btn-danger" type="button" @(!Model.IsProcessing ? "disabled" : "")>
            <i class="bi bi-stop-fill"></i> Dừng xử lý
        </button>
        <button id="clearQueueBtn" class="btn-action btn-secondary" type="button">
            <i class="bi bi-trash"></i> Xóa hàng đợi
        </button>
    </div>
</div>

<form id="csrfForm" method="post" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<!-- Console for log output -->
<div class="console-container">
    <div class="console-header">
        <h5>Log cập nhật</h5>
        <div class="console-controls">
            <button class="btn-icon" id="toggleAutoScrollBtn" title="Tự động cuộn" type="button">
                <i class="bi bi-arrow-down-square"></i>
            </button>
            <button class="btn-icon" id="clearConsoleBtn" title="Xóa console" type="button">
                <i class="bi bi-eraser"></i>
            </button>
        </div>
    </div>
    <div class="console-body" id="steamcmd-console"></div>
</div>

<!-- Bảng hàng đợi hiện tại -->
<div class="table-container mt-4">
    <div class="table-header">
        <h5>Hàng đợi hiện tại</h5>
        <div class="search-box">
            <input type="text" id="queueSearch" placeholder="Tìm kiếm...">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="table-responsive">
        <table id="queueTable" class="table">
            <thead>
                <tr>
                    <th>STT</th>
                    <th>Profile</th>
                    <th>App</th>
                    <th>Loại</th>
                    <th>Thời gian thêm</th>
                    <th>Bắt đầu</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CurrentQueue)
                {
                    <tr data-id="@item.Id" class="@GetRowClass(item.Status)">
                        <td>@item.Order</td>
                        <td>@item.ProfileName</td>
                        <td>
                            <span title="AppID: @item.AppId">@item.AppName</span>
                        </td>
                        <td>
                            @if (item.IsMainApp)
                            {
                                <span class="badge bg-primary">Chính</span>
                            }
                            else
                            {
                                <span class="badge bg-info">Phụ thuộc</span>
                            }
                        </td>
                        <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        <td>@(item.StartedAt.HasValue ? item.StartedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-")</td>
                        <td>
                            <span class="status-badge @GetStatusClass(item.Status)">
                                <i class="bi @GetStatusIcon(item.Status)"></i>
                                @item.Status
                            </span>
                        </td>
                        <td>
                            @if (item.Status == "Đang chờ")
                            {
                                <button class="btn-icon delete remove-queue-btn" type="button" data-id="@item.Id" title="Xóa khỏi hàng đợi">
                                    <i class="bi bi-trash"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
                @if (!Model.CurrentQueue.Any())
                {
                    <tr>
                        <td colspan="8" class="text-center">Không có mục nào trong hàng đợi.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Bảng lịch sử hàng đợi -->
<div class="table-container mt-4">
    <div class="table-header">
        <h5>Lịch sử cập nhật</h5>
        <div class="search-box">
            <input type="text" id="historySearch" placeholder="Tìm kiếm...">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="table-responsive">
        <table id="historyTable" class="table">
            <thead>
                <tr>
                    <th>STT</th>
                    <th>Profile</th>
                    <th>App</th>
                    <th>Loại</th>
                    <th>Thời gian thêm</th>
                    <th>Bắt đầu</th>
                    <th>Hoàn thành</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.QueueHistory)
                {
                    <tr data-id="@item.Id" class="@GetRowClass(item.Status)">
                        <td>@item.Order</td>
                        <td>@item.ProfileName</td>
                        <td>
                            <span title="AppID: @item.AppId">@item.AppName</span>
                        </td>
                        <td>
                            @if (item.IsMainApp)
                            {
                                <span class="badge bg-primary">Chính</span>
                            }
                            else
                            {
                                <span class="badge bg-info">Phụ thuộc</span>
                            }
                        </td>
                        <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        <td>@(item.StartedAt.HasValue ? item.StartedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-")</td>
                        <td>@(item.CompletedAt.HasValue ? item.CompletedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-")</td>
                        <td>
                            <span class="status-badge @GetStatusClass(item.Status)">
                                <i class="bi @GetStatusIcon(item.Status)"></i>
                                @item.Status
                            </span>
                        </td>
                        <td>
                            @if (item.Status == "Lỗi")
                            {
                                <button class="btn-icon play retry-queue-btn" type="button" data-profile-id="@item.ProfileId" data-app-id="@item.AppId" data-is-main="@item.IsMainApp.ToString().ToLower()" title="Thử lại">
                                    <i class="bi bi-arrow-clockwise"></i>
                                </button>
                                <span class="ms-2 text-danger" title="@item.Error">
                                    <i class="bi bi-info-circle"></i>
                                </span>
                            }
                        </td>
                    </tr>
                }
                @if (!Model.QueueHistory.Any())
                {
                    <tr>
                        <td colspan="9" class="text-center">Chưa có lịch sử cập nhật.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@functions {
    string GetRowClass(string status)
    {
        return status switch
        {
            "Đang xử lý" => "table-primary",
            "Hoàn thành" => "table-success",
            "Lỗi" => "table-danger",
            "Đã hủy" => "table-warning",
            _ => ""
        };
    }

    string GetStatusClass(string status)
    {
        return status switch
        {
            "Đang chờ" => "waiting",
            "Đang xử lý" => "processing",
            "Hoàn thành" => "success",
            "Lỗi" => "error",
            "Đã hủy" => "cancelled",
            _ => ""
        };
    }

    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Đang chờ" => "bi-hourglass-split",
            "Đang xử lý" => "bi-arrow-repeat",
            "Hoàn thành" => "bi-check-circle",
            "Lỗi" => "bi-exclamation-triangle",
            "Đã hủy" => "bi-x-circle",
            _ => "bi-question-circle"
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Lấy CSRF token từ form
            var token = $('#csrfForm input[name="__RequestVerificationToken"]').val();

            // Khởi tạo SignalR connection cho cập nhật hàng đợi
            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/logHub")
                .withAutomaticReconnect()
                .build();

            // Sự kiện nhận cập nhật hàng đợi
            connection.on("ReceiveQueueUpdate", function(queueItems) {
                updateQueueTable(queueItems);
            });

            connection.start()
                .then(function() {
                    console.log("Kết nối SignalR thành công");
                })
                .catch(function(err) {
                    console.error("Lỗi kết nối SignalR: " + err);
                });

            // Tự động làm mới hàng đợi hiện tại mỗi 5 giây
            setInterval(function() {
                $.ajax({
                    url: "/QueueManager?handler=GetCurrentQueue",
                    method: "GET",
                    success: function(response) {
                        if (response.success) {
                            updateCurrentQueueTable(response.data);
                        }
                    }
                });
            }, 5000);

            // Tìm kiếm trong bảng hàng đợi
            $("#queueSearch").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $("#queueTable tbody tr").filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            // Thêm sự kiện tìm kiếm cho bảng lịch sử
            $("#historySearch").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $("#historyTable tbody tr").filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });

            // Xử lý nút Kiểm tra cập nhật
            $("#checkUpdatesBtn").click(function() {
                $(this).prop("disabled", true).html('<i class="bi bi-hourglass-split me-1"></i> Đang kiểm tra...');

                $.ajax({
                    url: "/UpdateManagement?handler=CheckUpdates",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast(response.message, "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể kiểm tra cập nhật"), "danger");
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi khi kiểm tra cập nhật: " + error, "danger");
                    },
                    complete: function() {
                        $("#checkUpdatesBtn").prop("disabled", false).html('<i class="bi bi-cloud-download"></i> Kiểm tra cập nhật');
                    }
                });
            });

            // Xử lý nút Xử lý hàng đợi
            $("#processQueueBtn").click(function() {
                $(this).prop("disabled", true);
                $("#stopQueueBtn").prop("disabled", false);

                $.ajax({
                    url: "/QueueManager?handler=StartProcessing",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã bắt đầu xử lý hàng đợi", "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể bắt đầu xử lý hàng đợi"), "danger");
                            $("#processQueueBtn").prop("disabled", false);
                            $("#stopQueueBtn").prop("disabled", true);
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                        $("#processQueueBtn").prop("disabled", false);
                        $("#stopQueueBtn").prop("disabled", true);
                    }
                });
            });

            // Xử lý nút Dừng xử lý
            $("#stopQueueBtn").click(function() {
                $(this).prop("disabled", true);

                $.ajax({
                    url: "/QueueManager?handler=StopProcessing",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã dừng xử lý hàng đợi", "success");
                            $("#processQueueBtn").prop("disabled", false);
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể dừng xử lý hàng đợi"), "danger");
                            $("#stopQueueBtn").prop("disabled", false);
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                        $("#stopQueueBtn").prop("disabled", false);
                    }
                });
            });

            // Xử lý nút Xóa hàng đợi
            $("#clearQueueBtn").click(function() {
                if (confirm("Bạn có chắc chắn muốn xóa tất cả các mục đang chờ trong hàng đợi không?")) {
                    $.ajax({
                        url: "/QueueManager?handler=ClearQueue",
                        method: "POST",
                        headers: {
                            "RequestVerificationToken": token
                        },
                        success: function(response) {
                            if (response.success) {
                                showToast("Đã xóa hàng đợi", "success");
                            } else {
                                showToast("Lỗi: " + (response.message || "Không thể xóa hàng đợi"), "danger");
                            }
                        },
                        error: function(xhr, status, error) {
                            showToast("Lỗi: " + error, "danger");
                        }
                    });
                }
            });

            // Xử lý nút Xóa khỏi hàng đợi
            $(document).on("click", ".remove-queue-btn", function() {
                var id = $(this).data("id");
                
                $.ajax({
                    url: "/QueueManager?handler=RemoveFromQueue",
                    method: "POST",
                    data: { id: id },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã xóa khỏi hàng đợi", "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể xóa khỏi hàng đợi"), "danger");
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                    }
                });
            });

            // Xử lý nút Thử lại
            $(document).on("click", ".retry-queue-btn", function() {
                var profileId = $(this).data("profile-id");
                var appId = $(this).data("app-id");
                var isMain = $(this).data("is-main");
                
                $.ajax({
                    url: "/QueueManager?handler=RetryItem",
                    method: "POST",
                    data: { 
                        profileId: profileId,
                        appId: appId,
                        isMainApp: isMain
                    },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast("Đã thêm lại vào hàng đợi", "success");
                        } else {
                            showToast("Lỗi: " + (response.message || "Không thể thêm lại vào hàng đợi"), "danger");
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast("Lỗi: " + error, "danger");
                    }
                });
            });
            
            // Sửa hàm cập nhật bảng để xử lý cả 2 loại dữ liệu
            function updateQueueTable(queueData) {
                // Tách dữ liệu thành 2 phần
                var currentQueue = queueData.filter(q => q.status === "Đang chờ" || q.status === "Đang xử lý");
                var queueHistory = queueData.filter(q => q.status !== "Đang chờ" && q.status !== "Đang xử lý");
                
                // Cập nhật bảng hàng đợi hiện tại
                updateCurrentQueueTable(currentQueue);
                
                // Cập nhật bảng lịch sử
                updateHistoryQueueTable(queueHistory);
                
                // Cập nhật trạng thái nút
                var isProcessing = currentQueue.some(item => item.status === "Đang xử lý");
                $("#processQueueBtn").prop("disabled", isProcessing);
                $("#stopQueueBtn").prop("disabled", !isProcessing);
            }
            
            // Hàm cập nhật bảng hàng đợi hiện tại
            function updateCurrentQueueTable(queueItems) {
                var tbody = $("#queueTable tbody");
                tbody.empty();
                
                if (queueItems.length === 0) {
                    tbody.append('<tr><td colspan="8" class="text-center">Không có mục nào trong hàng đợi.</td></tr>');
                    return;
                }
                
                // Sắp xếp theo thứ tự
                queueItems.sort((a, b) => a.order - b.order);
                
                // Tạo HTML cho mỗi mục
                queueItems.forEach(function(item) {
                    var rowClass = getRowClass(item.status);
                    var statusClass = getStatusClass(item.status);
                    var statusIcon = getStatusIcon(item.status);
                    
                    var row = $("<tr>")
                        .attr("data-id", item.id)
                        .addClass(rowClass);
                        
                    row.append(
                        $("<td>").text(item.order),
                        $("<td>").text(item.profileName),
                        $("<td>").append(
                            $("<span>")
                                .attr("title", "AppID: " + item.appId)
                                .text(item.appName)
                        ),
                        $("<td>").append(
                            item.isMainApp ?
                            $("<span>").addClass("badge bg-primary").text("Chính") :
                            $("<span>").addClass("badge bg-info").text("Phụ thuộc")
                        ),
                        $("<td>").text(formatDateTime(item.createdAt)),
                        $("<td>").text(item.startedAt ? formatDateTime(item.startedAt) : "-"),
                        $("<td>").append(
                            $("<span>")
                                .addClass("status-badge " + statusClass)
                                .append($("<i>").addClass("bi " + statusIcon))
                                .append(" " + item.status)
                        ),
                        $("<td>").append(
                            item.status === "Đang chờ" ?
                            $("<button>")
                                .addClass("btn-icon delete remove-queue-btn")
                                .attr("type", "button")
                                .attr("data-id", item.id)
                                .attr("title", "Xóa khỏi hàng đợi")
                                .append($("<i>").addClass("bi bi-trash")) :
                            ""
                        )
                    );
                    
                    tbody.append(row);
                });
                
                // Áp dụng lại filter nếu có
                var searchValue = $("#queueSearch").val().toLowerCase();
                if (searchValue) {
                    $("#queueTable tbody tr").filter(function() {
                        $(this).toggle($(this).text().toLowerCase().indexOf(searchValue) > -1);
                    });
                }
            }
            
            // Hàm cập nhật bảng lịch sử
            function updateHistoryQueueTable(queueItems) {
                var tbody = $("#historyTable tbody");
                tbody.empty();
                
                if (queueItems.length === 0) {
                    tbody.append('<tr><td colspan="9" class="text-center">Chưa có lịch sử cập nhật.</td></tr>');
                    return;
                }
                
                // Sắp xếp theo thời gian hoàn thành, mới nhất lên đầu
                queueItems.sort((a, b) => {
                    const dateA = a.completedAt ? new Date(a.completedAt) : new Date(a.createdAt);
                    const dateB = b.completedAt ? new Date(b.completedAt) : new Date(b.createdAt);
                    return dateB - dateA;
                });
                
                // Tạo HTML cho mỗi mục
                queueItems.forEach(function(item) {
                    var rowClass = getRowClass(item.status);
                    var statusClass = getStatusClass(item.status);
                    var statusIcon = getStatusIcon(item.status);
                    
                    var row = $("<tr>")
                        .attr("data-id", item.id)
                        .addClass(rowClass);
                        
                    row.append(
                        $("<td>").text(item.order),
                        $("<td>").text(item.profileName),
                        $("<td>").append(
                            $("<span>")
                                .attr("title", "AppID: " + item.appId)
                                .text(item.appName)
                        ),
                        $("<td>").append(
                            item.isMainApp ?
                            $("<span>").addClass("badge bg-primary").text("Chính") :
                            $("<span>").addClass("badge bg-info").text("Phụ thuộc")
                        ),
                        $("<td>").text(formatDateTime(item.createdAt)),
                        $("<td>").text(item.startedAt ? formatDateTime(item.startedAt) : "-"),
                        $("<td>").text(item.completedAt ? formatDateTime(item.completedAt) : "-"),
                        $("<td>").append(
                            $("<span>")
                                .addClass("status-badge " + statusClass)
                                .append($("<i>").addClass("bi " + statusIcon))
                                .append(" " + item.status)
                        ),
                        createHistoryActionColumn(item)
                    );
                    
                    tbody.append(row);
                });
                
                // Áp dụng lại filter nếu có
                var searchValue = $("#historySearch").val().toLowerCase();
                if (searchValue) {
                    $("#historyTable tbody tr").filter(function() {
                        $(this).toggle($(this).text().toLowerCase().indexOf(searchValue) > -1);
                    });
                }
            }
            
            function createHistoryActionColumn(item) {
                var cell = $("<td>");
                
                if (item.status === "Lỗi") {
                    cell.append(
                        $("<button>")
                            .addClass("btn-icon play retry-queue-btn")
                            .attr("type", "button")
                            .attr("data-profile-id", item.profileId)
                            .attr("data-app-id", item.appId)
                            .attr("data-is-main", item.isMainApp.toString().toLowerCase())
                            .attr("title", "Thử lại")
                            .append($("<i>").addClass("bi bi-arrow-clockwise"))
                    );
                    
                    if (item.error) {
                        cell.append(
                            $("<span>")
                                .addClass("ms-2 text-danger")
                                .attr("title", item.error)
                                .append($("<i>").addClass("bi bi-info-circle"))
                        );
                    }
                }
                
                return cell;
            }
            
            function getRowClass(status) {
                switch(status) {
                    case "Đang xử lý": return "table-primary";
                    case "Hoàn thành": return "table-success";
                    case "Lỗi": return "table-danger";
                    case "Đã hủy": return "table-warning";
                    default: return "";
                }
            }
            
            function getStatusClass(status) {
                switch(status) {
                    case "Đang chờ": return "waiting";
                    case "Đang xử lý": return "processing";
                    case "Hoàn thành": return "success";
                    case "Lỗi": return "error";
                    case "Đã hủy": return "cancelled";
                    default: return "";
                }
            }
            
            function getStatusIcon(status) {
                switch(status) {
                    case "Đang chờ": return "bi-hourglass-split";
                    case "Đang xử lý": return "bi-arrow-repeat";
                    case "Hoàn thành": return "bi-check-circle";
                    case "Lỗi": return "bi-exclamation-triangle";
                    case "Đã hủy": return "bi-x-circle";
                    default: return "bi-question-circle";
                }
            }
            
            function formatDateTime(dateStr) {
                if (!dateStr) return "-";
                var date = new Date(dateStr);
                return date.toLocaleString('vi-VN', { 
                    day: '2-digit', 
                    month: '2-digit', 
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
            }
        });
    </script>
}