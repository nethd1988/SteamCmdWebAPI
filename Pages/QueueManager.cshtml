@page
@model QueueManagerModel
@{
    ViewData["Title"] = "Quản lý hàng đợi";
    ViewData["ActivePage"] = "QueueManager";
}

@using SteamCmdWebAPI.Services
@using System.Globalization
@using System.IO

@{
    // Extension methods for QueueItem
    string GetFormattedCreatedAt(QueueService.QueueItem item)
    {
        return item.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss");
    }

    string GetFormattedStartedAt(QueueService.QueueItem item)
    {
        return item.StartedAt.HasValue ? item.StartedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-";
    }

    string GetFormattedCompletedAt(QueueService.QueueItem item)
    {
        return item.CompletedAt.HasValue ? item.CompletedAt.Value.ToString("dd/MM/yyyy HH:mm:ss") : "-";
    }
}

<style>
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
    }
    
    .status-badge.waiting {
        background-color: #f8f9fa;
        color: #6c757d;
    }
    
    .status-badge.processing {
        background-color: #cfe2ff;
        color: #084298;
    }
    
    .status-badge.success {
        background-color: #d1e7dd;
        color: #0f5132;
    }
    
    .status-badge.error {
        background-color: #f8d7da;
        color: #842029;
    }
    
    .status-badge.cancelled {
        background-color: #fff3cd;
        color: #664d03;
    }
    
    .status-badge i {
        margin-right: 0.25rem;
    }

    .game-info-container {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .game-icon {
        width: 32px;
        height: 32px;
        border-radius: 4px;
        object-fit: cover;
    }
    
    .game-icon-placeholder {
        width: 32px;
        height: 32px;
        border-radius: 4px;
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #666;
        font-size: 18px;
    }
    
    /* Styles for log display */
    #update-log {
        height: 400px;
        overflow-y: auto;
        background-color: #0a1929;
        color: #e6e6e6;
        font-family: 'Consolas', 'Courier New', monospace;
        font-size: 14px;
        padding: 10px;
        border-radius: 0 0 4px 4px;
    }
    
    .log-entries {
        display: flex;
        flex-direction: column;
    }
    
    .log-entry {
        margin-bottom: 3px;
        line-height: 1.5;
        white-space: pre-wrap;
        word-break: break-word;
    }
    
    .log-timestamp {
        color: #6cb4ee;
        margin-right: 10px;
    }
    
    .log-content {
        color: #e6e6e6;
    }
    
    .log-content.success {
        color: #4caf50;
    }
    
    .log-content.error {
        color: #f44336;
    }
    
    .log-content.warning {
        color: #ff9800;
    }
    
    .log-content.info {
        color: #2196f3;
    }
</style>

<div class="page-header d-flex justify-content-between align-items-center">
    <h1>Quản lý hàng đợi cập nhật</h1>
    <div class="header-actions">
        <button id="processQueueBtn" class="btn-action btn-success" type="button" @(Model.IsProcessing ? "disabled" : "")>
            <i class="bi bi-play-fill"></i> Xử lý hàng đợi
        </button>
        <button id="stopQueueBtn" class="btn-action btn-danger" type="button" @(!Model.IsProcessing ? "disabled" : "")>
            <i class="bi bi-stop-fill"></i> Dừng xử lý
        </button>
        <button id="clearQueueBtn" class="btn-action btn-secondary" type="button">
            <i class="bi bi-trash"></i> Xóa hàng đợi
        </button>
    </div>
</div>

<div class="d-flex justify-content-end mb-2">
    <small class="text-muted">
        <i class="bi bi-arrow-clockwise"></i> 
        <span>Tự động làm mới mỗi 5 giây</span>
    </small>
</div>

<form id="csrfForm" method="post" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<!-- Log updates -->
<div class="console-container">
    <div class="console-header">
        <h5>Log cập nhật</h5>
        <div class="console-controls">
            <button class="btn-icon" id="toggleAutoScrollBtn" title="Tự động cuộn" type="button">
                <i class="bi bi-arrow-down-square"></i>
            </button>
            <button class="btn-icon" id="clearConsoleBtn" title="Xóa console" type="button">
                <i class="bi bi-eraser"></i>
            </button>
        </div>
    </div>
    <div class="console-body" id="update-log">
        <div class="log-entries">
            <!-- Log entries will be added here dynamically -->
            <div class="log-entry"><span class="log-timestamp">@DateTime.Now.ToString("HH:mm:ss")</span> <span class="log-content">Hệ thống đã sẵn sàng xử lý cập nhật game.</span></div>
        </div>
    </div>
</div>

<!-- Bảng hàng đợi hiện tại -->
<div class="table-container mt-4">
    <div class="table-header">
        <h5>Hàng đợi hiện tại</h5>
        <div class="search-box">
            <input type="text" id="queueSearch" placeholder="Tìm kiếm...">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="table-responsive">
        <table id="queueTable" class="table">
            <thead>
                <tr>
                    <th>STT</th>
                    <th>App</th>
                    <th>Thời gian thêm</th>
                    <th>Bắt đầu</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CurrentQueue)
                {
                    <tr data-id="@item.Id" class="@GetRowClass(item.Status)">
                        <td>@item.Order</td>
                        <td>
                            <div class="game-info-container">
                                @{
                                    var iconPath = Model.GetIconPath(item.AppId);
                                }
                                @if (!string.IsNullOrEmpty(iconPath))
                                {
                                    <img src="@iconPath" alt="@item.AppName" class="game-icon" />
                                }
                                else
                                {
                                    <div class="game-icon-placeholder">
                                        <i class="bi bi-controller"></i>
                                    </div>
                                }
                            <span title="AppID: @item.AppId">@item.AppName</span>
                            </div>
                        </td>
                        <td>@GetFormattedCreatedAt(item)</td>
                        <td>@GetFormattedStartedAt(item)</td>
                        <td>
                            <span class="status-badge @GetStatusClass(item.Status)">
                                <i class="bi @GetStatusIcon(item.Status)"></i>
                                @item.Status
                            </span>
                        </td>
                        <td>
                            @if (item.Status == "Đang chờ")
                            {
                                <button class="btn-icon delete remove-queue-btn" type="button" data-id="@item.Id" title="Xóa khỏi hàng đợi">
                                    <i class="bi bi-trash"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
                @if (!Model.CurrentQueue.Any())
                {
                    <tr>
                        <td colspan="6" class="text-center">Không có mục nào trong hàng đợi.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Chỉnh sửa bảng lịch sử cập nhật -->
<div class="card mt-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Lịch sử cập nhật</h5>
        <div class="search-box">
            <input type="text" id="historySearch" placeholder="Tìm kiếm lịch sử...">
            <i class="bi bi-search"></i>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="historyTable">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>App</th>
                        <th>Thời gian thêm</th>
                        <th>Bắt đầu</th>
                        <th>Hoàn thành</th>
                        <th>Trạng thái</th>
                    </tr>
                </thead>
                <tbody id="historyTableBody">
                    @foreach (var item in Model.QueueHistory.OrderByDescending(h => h.CompletedAt ?? h.CreatedAt))
                    {
                        <tr>
                            <td>@(Model.QueueHistory.IndexOf(item) + 1)</td>
                            <td>
                                <div class="game-info-container">
                                    @{
                                        var iconPath = Model.GetIconPath(item.AppId);
                                    }
                                    @if (!string.IsNullOrEmpty(iconPath))
                                    {
                                        <img src="@iconPath" alt="@item.AppName" class="game-icon" />
                                    }
                                    else
                                    {
                                        <div class="game-icon-placeholder">
                                            <i class="bi bi-controller"></i>
                                        </div>
                                    }
                                    <span title="AppID: @item.AppId">@item.AppName</span>
                                </div>
                            </td>
                            <td>@GetFormattedCreatedAt(item)</td>
                            <td>@GetFormattedStartedAt(item)</td>
                            <td>@GetFormattedCompletedAt(item)</td>
                            <td>
                                <span class="status-badge @GetStatusClass(item.Status)">
                                    <i class="bi @GetStatusIcon(item.Status)"></i>
                                    @item.Status
                                </span>
                            </td>
                        </tr>
                    }
                    @if (!Model.QueueHistory.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center">Không có mục nào trong lịch sử</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@functions {
    string GetRowClass(string status)
    {
        return status switch
        {
            "Đang xử lý" => "table-primary",
            "Hoàn thành" => "table-success",
            "Lỗi" => "table-danger",
            "Đã hủy" => "table-warning",
            _ => ""
        };
    }

    string GetStatusClass(string status)
    {
        return status switch
        {
            "Đang chờ" => "waiting",
            "Đang xử lý" => "processing",
            "Hoàn thành" => "success",
            "Lỗi" => "error",
            "Đã hủy" => "cancelled",
            _ => ""
        };
    }

    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Đang chờ" => "bi-hourglass-split",
            "Đang xử lý" => "bi-arrow-repeat",
            "Hoàn thành" => "bi-check-circle",
            "Lỗi" => "bi-exclamation-triangle",
            "Đã hủy" => "bi-x-circle",
            _ => "bi-question-circle"
        };
    }
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        let autoRefreshInterval;
        const REFRESH_INTERVAL = 5000; // 5 seconds
        let isAutoScrollEnabled = true;
        
        // Cache for storing icon paths by appId
        const iconCache = {};
        
        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/logHub")
            .withAutomaticReconnect()
            .build();
            
        // Debug function to check object structure
        function debugLogMessage(data) {
            console.log('Received log data:', data);
            console.log('Type of data:', typeof data);
            
            if (typeof data === 'object') {
                console.log('Object keys:', Object.keys(data));
                console.log('Object content:', JSON.stringify(data));
            }
        }
        
        // Handle receiving logs
        connection.on("ReceiveLog", function(message) {
            // Add debug logging
            debugLogMessage(message);
            
            // Convert object to string if necessary
            if (typeof message === 'object') {
                // If it's an object with properties, try to extract meaningful text
                if (message.message) {
                    message = message.message;
                } else if (message.log) {
                    message = message.log;
                } else {
                    // If no obvious property, stringify the object
                    message = JSON.stringify(message);
                }
            }
            
            addLogEntry(message);
        });
        
        // Start the connection
        connection.start().catch(function(err) {
            console.error("Lỗi kết nối với server: ", err);
            addLogEntry("Lỗi kết nối với server. Tự động làm mới sau 5 giây.", "error");
        });
        
        $(document).ready(function() {
            // Initialize auto-refresh
            startAutoRefresh();
            
            // Initialize the icon cache from existing icons on the page
            $('.game-icon').each(function() {
                const $container = $(this).closest('.game-info-container');
                const appId = $container.find('span').attr('title').replace('AppID: ', '');
                if (appId && this.src) {
                    iconCache[appId] = this.src;
                }
            });
            
            // Connect button event handlers
            $('#processQueueBtn').click(function() {
                startProcessingQueue();
            });
            
            $('#stopQueueBtn').click(function() {
                stopProcessingQueue();
            });
            
            $('#clearQueueBtn').click(function() {
                clearQueue();
            });
            
            // Connect search functionality
            $('#queueSearch').on('keyup', function() {
                const value = $(this).val().toLowerCase();
                $('#queueTable tbody tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            $('#historySearch').on('keyup', function() {
                const value = $(this).val().toLowerCase();
                $('#historyTableBody tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            // Handle form submission to avoid refreshing entire page
            $('#csrfForm').submit(function(e) {
                e.preventDefault();
            });
            
            // Connect the initial remove-queue-btn handlers
            $(document).on('click', '.remove-queue-btn', function() {
                removeFromQueue($(this).data('id'));
            });
            
            // Toggle auto-scroll
            $('#toggleAutoScrollBtn').click(function() {
                isAutoScrollEnabled = !isAutoScrollEnabled;
                $(this).toggleClass('active', isAutoScrollEnabled);
                if (isAutoScrollEnabled) {
                    scrollLogToBottom();
                }
            });
            
            // Clear console
            $('#clearConsoleBtn').click(function() {
                clearLogConsole();
            });
        });
        
        function startAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            // Immediately refresh on start
            refreshQueueData();
            
            autoRefreshInterval = setInterval(function() {
                refreshQueueData();
            }, REFRESH_INTERVAL);
        }
        
        function refreshQueueData() {
            $.ajax({
                url: '?handler=UpdateQueueStatus',
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    if (response.success) {
                        // Update the icon cache with returned paths
                        response.currentQueue.forEach(item => {
                            if (item.iconPath) {
                                iconCache[item.appId] = item.iconPath;
                            }
                        });
                        
                        response.queueHistory.forEach(item => {
                            if (item.iconPath) {
                                iconCache[item.appId] = item.iconPath;
                            }
                        });
                        
                        updateQueueTable(response.currentQueue);
                        updateHistoryTable(response.queueHistory);
                        
                        // Update recent logs
                        if (response.recentLogs && response.recentLogs.length > 0) {
                            updateLogEntries(response.recentLogs);
                        }
                        
                        // Update button states based on queue status
                        const isProcessing = response.isProcessing;
                        $('#processQueueBtn').prop('disabled', isProcessing);
                        $('#stopQueueBtn').prop('disabled', !isProcessing);
                } else {
                        console.error('Lỗi khi làm mới dữ liệu:', response.message);
                        addLogEntry('Lỗi khi làm mới dữ liệu: ' + response.message, 'error');
                    }
                },
                error: function(error) {
                    console.error('Lỗi khi gọi API:', error);
                    addLogEntry('Lỗi khi gọi API: ' + error.statusText, 'error');
                }
            });
        }
        
        // Update logs from API response
        function updateLogEntries(logs) {
            // Do not completely replace logs to keep continuity
            // Instead, append new ones that aren't already displayed
            
            const $logEntries = $('#update-log .log-entries');
            const currentEntries = new Set();
            
            // Get current log entries to avoid duplicates
            $logEntries.find('.log-entry').each(function() {
                currentEntries.add($(this).text());
            });
            
            // Parse and add new logs
            logs.forEach(logEntry => {
                if (!logEntry) return;
                
                // For each log entry, check if it's already displayed
                if (!Array.from(currentEntries).some(entry => entry.includes(logEntry))) {
                    let type = '';
                    
                    // Determine log type by content
                    if (logEntry.includes('Lỗi') || logEntry.includes('lỗi') || logEntry.includes('thất bại')) {
                        type = 'error';
                    } else if (logEntry.includes('Cảnh báo') || logEntry.includes('Dừng')) {
                        type = 'warning';
                    } else if (logEntry.includes('thành công') || logEntry.includes('hoàn thành')) {
                        type = 'success';
                    } else if (logEntry.includes('Thông tin') || logEntry.includes('Đã bắt đầu')) {
                        type = 'info';
                    }
                    
                    addLogEntry(logEntry, type);
                }
            });
        }
        
        function updateQueueTable(queue) {
            const tableBody = $('#queueTable tbody');
            
            if (queue.length === 0) {
                tableBody.html('<tr><td colspan="6" class="text-center">Không có mục nào trong hàng đợi.</td></tr>');
                return;
            }
            
            let html = '';
            
            queue.forEach((item, index) => {
                const rowClass = getRowClass(item.status);
                const statusClass = getStatusClass(item.status);
                const statusIcon = getStatusIcon(item.status);
                
                html += `
                <tr data-id="${item.id}" class="${rowClass}">
                    <td>${item.order}</td>
                    <td>
                        <div class="game-info-container">
                            ${getGameIconHtml(item.appId, item.appName)}
                            <span title="AppID: ${item.appId}">${item.appName}</span>
                        </div>
                    </td>
                    <td>${formatDate(item.createdAt)}</td>
                    <td>${item.startedAt ? formatDate(item.startedAt) : '-'}</td>
                    <td>
                        <span class="status-badge ${statusClass}">
                            <i class="bi ${statusIcon}"></i>
                            ${item.status}
                        </span>
                    </td>
                    <td>
                        ${item.status === "Đang chờ" ? 
                            `<button class="btn-icon delete remove-queue-btn" type="button" data-id="${item.id}" title="Xóa khỏi hàng đợi">
                                <i class="bi bi-trash"></i>
                            </button>` : ''}
                    </td>
                </tr>`;
            });
            
            tableBody.html(html);
            
            // Reattach event handlers for new elements
            $('.remove-queue-btn').click(function() {
                removeFromQueue($(this).data('id'));
            });
        }
        
        function updateHistoryTable(history) {
            const tableBody = $('#historyTableBody');
            
            if (history.length === 0) {
                tableBody.html('<tr><td colspan="6" class="text-center">Không có lịch sử cập nhật.</td></tr>');
                return;
            }
            
            // Sort history by completion time (newest first)
            const sortedHistory = [...history].sort((a, b) => {
                const dateA = a.completedAt || a.createdAt;
                const dateB = b.completedAt || b.createdAt;
                return new Date(dateB) - new Date(dateA);
            });
            
            let html = '';
            
            sortedHistory.forEach((item, index) => {
                const statusClass = getStatusClass(item.status);
                const statusIcon = getStatusIcon(item.status);
                
                html += `
                <tr>
                    <td>${index + 1}</td>
                    <td>
                        <div class="game-info-container">
                            ${getGameIconHtml(item.appId, item.appName)}
                            <span title="AppID: ${item.appId}">${item.appName}</span>
                        </div>
                    </td>
                    <td>${formatDate(item.createdAt)}</td>
                    <td>${item.startedAt ? formatDate(item.startedAt) : '-'}</td>
                    <td>${item.completedAt ? formatDate(item.completedAt) : '-'}</td>
                    <td>
                        <span class="status-badge ${statusClass}">
                            <i class="bi ${statusIcon}"></i>
                            ${item.status}
                        </span>
                    </td>
                </tr>`;
            });
            
            tableBody.html(html);
        }
        
        function getGameIconHtml(appId, appName) {
            const iconPath = getIconPath(appId);
            
            if (iconPath) {
                return `<img src="${iconPath}" alt="${appName}" class="game-icon" />`;
                        } else {
                return `
                <div class="game-icon-placeholder">
                    <i class="bi bi-controller"></i>
                </div>`;
            }
        }
        
        function getIconPath(appId) {
            // Check if we have the icon path in our cache
            return iconCache[appId] || null;
        }
        
        function formatDate(dateString) {
            if (!dateString) return '-';
            
            const date = new Date(dateString);
            return date.toLocaleString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }
        
        function getRowClass(status) {
            switch (status) {
                case 'Đang xử lý':
                    return 'table-primary';
                case 'Hoàn thành':
                    return 'table-success';
                case 'Lỗi':
                    return 'table-danger';
                case 'Đã hủy':
                    return 'table-warning';
                default:
                    return '';
            }
        }
        
        function getStatusClass(status) {
            switch (status) {
                case 'Đang chờ':
                    return 'waiting';
                case 'Đang xử lý':
                    return 'processing';
                case 'Hoàn thành':
                    return 'success';
                case 'Lỗi':
                    return 'error';
                case 'Đã hủy':
                    return 'cancelled';
                default:
                    return '';
            }
        }
        
        function getStatusIcon(status) {
            switch (status) {
                case 'Đang chờ':
                    return 'bi-hourglass-split';
                case 'Đang xử lý':
                    return 'bi-arrow-repeat';
                case 'Hoàn thành':
                    return 'bi-check-circle';
                case 'Lỗi':
                    return 'bi-exclamation-triangle';
                case 'Đã hủy':
                    return 'bi-x-circle';
                default:
                    return 'bi-question-circle';
            }
        }
        
        function removeFromQueue(id) {
            if (!confirm('Bạn có chắc chắn muốn xóa mục này khỏi hàng đợi?')) {
                return;
            }

                $.ajax({
                url: '?handler=RemoveFromQueue',
                type: 'POST',
                data: { id: id },
                    headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                        // Refresh the data immediately after successful removal
                        refreshQueueData();
                        addLogEntry('Đã xóa mục khỏi hàng đợi', 'success');
                        } else {
                        alert('Lỗi khi xóa mục khỏi hàng đợi: ' + response.message);
                        addLogEntry('Lỗi khi xóa mục khỏi hàng đợi: ' + response.message, 'error');
                    }
                },
                error: function(error) {
                    alert('Lỗi khi gọi API: ' + error.statusText);
                    addLogEntry('Lỗi khi gọi API: ' + error.statusText, 'error');
                }
            });
        }
        
        function startProcessingQueue() {
            $('#processQueueBtn').prop('disabled', true);
            $('#stopQueueBtn').prop('disabled', false);

                $.ajax({
                url: '?handler=StartProcessing',
                type: 'POST',
                    headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                        // Refresh the data immediately
                        refreshQueueData();
                        addLogEntry('Đã bắt đầu xử lý hàng đợi', 'info');
                        } else {
                        alert('Lỗi khi bắt đầu xử lý hàng đợi: ' + (response.message || 'Không rõ lỗi'));
                        $('#processQueueBtn').prop('disabled', false);
                        $('#stopQueueBtn').prop('disabled', true);
                        addLogEntry('Lỗi khi bắt đầu xử lý hàng đợi: ' + (response.message || 'Không rõ lỗi'), 'error');
                    }
                },
                error: function(error) {
                    alert('Lỗi khi gọi API: ' + error.statusText);
                    $('#processQueueBtn').prop('disabled', false);
                    $('#stopQueueBtn').prop('disabled', true);
                    addLogEntry('Lỗi khi gọi API: ' + error.statusText, 'error');
                }
            });
        }
        
        function stopProcessingQueue() {
            $('#stopQueueBtn').prop('disabled', true);
            
                    $.ajax({
                url: '?handler=StopProcessing',
                type: 'POST',
                        headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                        // Refresh the data immediately
                        refreshQueueData();
                        addLogEntry('Đã dừng xử lý hàng đợi', 'warning');
                            } else {
                        alert('Lỗi khi dừng xử lý hàng đợi: ' + (response.message || 'Không rõ lỗi'));
                        $('#stopQueueBtn').prop('disabled', false);
                        addLogEntry('Lỗi khi dừng xử lý hàng đợi: ' + (response.message || 'Không rõ lỗi'), 'error');
                    }
                },
                error: function(error) {
                    alert('Lỗi khi gọi API: ' + error.statusText);
                    $('#stopQueueBtn').prop('disabled', false);
                    addLogEntry('Lỗi khi gọi API: ' + error.statusText, 'error');
                }
            });
        }
        
        function clearQueue() {
            if (!confirm('Bạn có chắc chắn muốn xóa tất cả các mục đang chờ trong hàng đợi không?')) {
                return;
            }
                
                $.ajax({
                url: '?handler=ClearQueue',
                type: 'POST',
                    headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                        // Refresh the data immediately
                        refreshQueueData();
                        addLogEntry('Đã xóa hàng đợi', 'success');
                        } else {
                        alert('Lỗi khi xóa hàng đợi: ' + (response.message || 'Không rõ lỗi'));
                        addLogEntry('Lỗi khi xóa hàng đợi: ' + (response.message || 'Không rõ lỗi'), 'error');
                    }
                },
                error: function(error) {
                    alert('Lỗi khi gọi API: ' + error.statusText);
                    addLogEntry('Lỗi khi gọi API: ' + error.statusText, 'error');
                }
            });
        }
        
        // Log functions
        function addLogEntry(message, type = '') {
            const timestamp = new Date().toTimeString().split(' ')[0];
            const $logEntries = $('#update-log .log-entries');
            
            const $entry = $('<div class="log-entry"></div>');
            $entry.append(`<span class="log-timestamp">${timestamp}</span>`);
            
            // Convert object to string if necessary
            if (typeof message === 'object') {
                message = JSON.stringify(message);
            }
            
            const $content = $(`<span class="log-content ${type}">${message}</span>`);
            $entry.append($content);
            
            $logEntries.append($entry);
            
            // Keep log size manageable by removing old entries if there are too many
            const MAX_LOG_ENTRIES = 100;
            const currentEntries = $logEntries.children();
            if (currentEntries.length > MAX_LOG_ENTRIES) {
                currentEntries.slice(0, currentEntries.length - MAX_LOG_ENTRIES).remove();
            }
            
            if (isAutoScrollEnabled) {
                scrollLogToBottom();
            }
        }
        
        function scrollLogToBottom() {
            const $logContainer = $('#update-log');
            $logContainer.scrollTop($logContainer[0].scrollHeight);
        }
        
        function clearLogConsole() {
            $('#update-log .log-entries').html('');
            addLogEntry('Đã xóa log', 'info');
        }
    </script>
}