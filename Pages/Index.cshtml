@page
@model IndexModel
@{
    ViewData["Title"] = "Quản lý cấu hình Steam AUTO";
}

<div class="container main-container">
    <h1>Quản lý cấu hình SteamAUTO</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            @TempData["Success"]
        </div>
    }

    <!-- Form ẩn để tạo Anti-Forgery Token -->
    <form id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>

    <div class="mb-3 control-panel">
        <div>
            <a asp-page="./Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Tạo cấu hình mới
            </a>
            <button id="runAllBtn" class="btn btn-success">
                <i class="bi bi-play-fill"></i> Chạy tất cả
            </button>
            <button id="stopAllBtn" class="btn btn-danger">
                <i class="bi bi-stop-fill"></i> Dừng tất cả
            </button>
            <a asp-page="./Logs" class="btn btn-info">
                <i class="bi bi-journal-text"></i> Xem Logs
            </a>
            <a asp-page="./Settings" class="btn btn-warning">
                <i class="bi bi-gear"></i> Cài đặt
            </a>
            <a asp-page="./ServerSync" class="btn btn-primary">
                <i class="bi bi-cloud-arrow-up-down"></i> Đồng bộ Server
            </a>
        </div>
        <div>
            <button id="toggleAutoScrollBtn" class="btn btn-outline-secondary" title="Bật/tắt tự động cuộn">
                <i class="bi bi-arrow-down-square"></i> Tự động cuộn
            </button>
            <button id="clearConsoleBtn" class="btn btn-outline-danger" title="Xóa nội dung console">
                <i class="bi bi-trash"></i> Xóa console
            </button>
        </div>
    </div>

    <!-- Console SteamCMD thay thế cho LogContainer -->
    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between align-items-center" id="consoleHeader">
            <h5 class="mb-0">SteamCMD Console</h5>
            <div class="profile-badge" id="activeProfileBadge"></div>
        </div>
        <div class="card-body p-0">
            <div id="steamcmd-console" data-profile-id="0"></div>
        </div>
    </div>

    <div class="mt-3 profile-list">
        <div class="card">
            <div class="card-header">
                <h5>Danh sách cấu hình</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Tên</th>
                                <th>App ID</th>
                                <th>Thư mục cài đặt</th>
                                <th>Trạng thái</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var profile in Model.Profiles)
                            {
                                <tr data-profile-id="@profile.Id" class="@(profile.Status == "Running" ? "table-success" : "")">
                                    <td>@profile.Id</td>
                                    <td>@profile.Name</td>
                                    <td>@profile.AppID</td>
                                    <td class="text-truncate" style="max-width: 200px;" title="@profile.InstallDirectory">@profile.InstallDirectory</td>
                                    <td>
                                        <span class="badge bg-@(profile.Status == "Running" ? "success" : "secondary")">
                                            @profile.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-sm btn-success run-btn" data-id="@profile.Id" title="Chạy">
                                                <i class="bi bi-play-fill"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger stop-btn" data-id="@profile.Id" title="Dừng">
                                                <i class="bi bi-stop-fill"></i>
                                            </button>
                                            <a asp-page="./Edit" asp-route-id="@profile.Id" class="btn btn-sm btn-primary" title="Sửa">
                                                <i class="bi bi-pencil-fill"></i>
                                            </a>
                                            <button class="btn btn-sm btn-danger delete-btn" data-id="@profile.Id" title="Xóa">
                                                <i class="bi bi-trash-fill"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="~/js/steamcmd-console.js" asp-append-version="true"></script>

    <script>
        // Khởi tạo SignalR connection (nếu chưa có)
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/steamHub") // Đảm bảo URL này khớp với Hub của bạn
            .build();

        // Định nghĩa hàm steamGuardDetector
        const steamGuardDetector = function(message) {
            if (message.includes("Steam Guard code:") ||
                message.includes("Two-factor code:") ||
                message.includes("Mobile Authenticator") ||
                message.includes("email address") ||
                (message.toLowerCase().includes("steam guard") && !message.includes("thành công"))) {

                // Hiển thị thông báo
                if (window.steamConsole) {
                    window.steamConsole.addLine("==== YÊU CẦU NHẬP MÃ XÁC THỰC STEAM GUARD ====", "steam-guard");
                    window.steamConsole.addLine("Vui lòng kiểm tra email hoặc ứng dụng Steam Mobile để lấy mã", "steam-guard");
                    window.steamConsole.enableConsoleInput();
                }
            }
        };

        // Xử lý nhận log từ SignalR
        connection.on("ReceiveLog", function(message) {
            if (window.steamConsole) {
                window.steamConsole.addLine(message); // Hiển thị log lên console
            }
            // Kiểm tra Steam Guard
            steamGuardDetector(message);
        });

        // Khởi động connection
        connection.start().catch(function(err) {
            console.error("Lỗi khi kết nối SignalR: " + err.toString());
        });

        $(document).ready(function () {
            // Lấy Anti-Forgery Token từ form
            var token = $('input[name="__RequestVerificationToken"]').val();
            if (!token) {
                console.error("Không tìm thấy Anti-Forgery Token!");
            }

            // Khởi tạo biến theo dõi cho Auto-scroll
            let autoScrollEnabled = true;

            // Xử lý nút bật/tắt tự động cuộn
            $("#toggleAutoScrollBtn").click(function() {
                autoScrollEnabled = !autoScrollEnabled;
                if (window.steamConsole) {
                    window.steamConsole.setAutoScroll(autoScrollEnabled);
                }
                $(this).toggleClass('btn-outline-secondary btn-secondary');
            });

            // Xử lý nút xóa console
            $("#clearConsoleBtn").click(function() {
                if (window.steamConsole) {
                    window.steamConsole.clear();
                }
            });

            // Cập nhật badge khi chạy profile
            function updateActiveProfileBadge(profileId, profileName) {
                const badge = $('#activeProfileBadge');
                const consoleHeader = $('#consoleHeader');

                if (profileId) {
                    badge.html(`<span class="badge bg-primary">Profile đang chạy: ${profileName || profileId}</span>`);
                    badge.show();
                    consoleHeader.addClass('running');
                } else {
                    badge.hide();
                    consoleHeader.removeClass('running');
                }
            }

            $(".run-btn").click(function () {
                const profileId = $(this).data("id");
                const profileName = $(this).closest('tr').find('td:nth-child(2)').text();

                $("#steamcmd-console").attr("data-profile-id", profileId);
                updateActiveProfileBadge(profileId, profileName);
                $("tr.table-success").removeClass('table-success');
                $(`tr[data-profile-id="${profileId}"]`).addClass('table-success');

                if (window.steamConsole) {
                    window.steamConsole.clear();
                    window.steamConsole.setProfileId(profileId);
                    window.steamConsole.addLine(`Đang chuẩn bị chạy profile: ${profileName} (ID: ${profileId})`, 'success');
                }

                $.ajax({
                    url: "/Index?handler=Run",
                    method: "POST",
                    data: { profileId: profileId },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (!response.success && response.error) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine("Lỗi: " + response.error, 'error');
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        if (window.steamConsole) {
                            window.steamConsole.addLine("Lỗi khi gửi yêu cầu: " + (xhr.responseText || error), 'error');
                        }
                    }
                });
            });

            $(".stop-btn").click(function () {
                const profileId = $(this).data("id");
                $(`tr[data-profile-id="${profileId}"]`).removeClass('table-success');

                if (window.steamConsole) {
                    window.steamConsole.addLine(`Đang dừng profile ID: ${profileId}...`, 'warning');
                }
                updateActiveProfileBadge(null);

                $.ajax({
                    url: "/Index?handler=Stop",
                    method: "POST",
                    data: { profileId: profileId },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine(`Đã dừng profile ID: ${profileId} thành công`, 'success');
                            }
                        } else if (response.error) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine("Lỗi: " + response.error, 'error');
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        if (window.steamConsole) {
                            window.steamConsole.addLine("Lỗi khi gửi yêu cầu dừng: " + (xhr.responseText || error), 'error');
                        }
                    }
                });
            });

            $(".delete-btn").click(function () {
                if (confirm("Bạn có chắc chắn muốn xóa cấu hình này?")) {
                    const profileId = $(this).data("id");

                    if (window.steamConsole) {
                        window.steamConsole.addLine(`Đang xóa profile ID: ${profileId}...`, 'warning');
                    }

                    $.ajax({
                        url: "/Index?handler=Delete",
                        method: "POST",
                        data: { profileId: profileId },
                        headers: {
                            "RequestVerificationToken": token
                        },
                        success: function (response) {
                            if (response.success) {
                                if (window.steamConsole) {
                                    window.steamConsole.addLine(`Đã xóa profile ID: ${profileId} thành công`, 'success');
                                }
                                location.reload();
                            } else if (response.error) {
                                if (window.steamConsole) {
                                    window.steamConsole.addLine("Lỗi khi xóa: " + response.error, 'error');
                                }
                            }
                        },
                        error: function (xhr, status, error) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine("Lỗi khi gửi yêu cầu xóa: " + (xhr.responseText || error), 'error');
                            }
                        }
                    });
                }
            });

            $("#runAllBtn").click(function () {
                if (window.steamConsole) {
                    window.steamConsole.clear();
                    window.steamConsole.addLine("Đang chuẩn bị chạy tất cả các profile...", 'success');
                }

                $.ajax({
                    url: "/Index?handler=RunAll",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (!response.success && response.error) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine("Lỗi: " + response.error, 'error');
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        if (window.steamConsole) {
                            window.steamConsole.addLine("Lỗi khi gửi yêu cầu chạy tất cả: " + (xhr.responseText || error), 'error');
                        }
                    }
                });
            });

            $("#stopAllBtn").click(function () {
                $("tr.table-success").removeClass('table-success');
                updateActiveProfileBadge(null);

                if (window.steamConsole) {
                    window.steamConsole.addLine("Đang dừng tất cả các profile...", 'warning');
                }

                $.ajax({
                    url: "/Index?handler=StopAll",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine("Đã dừng tất cả các profile thành công", 'success');
                            }
                        } else if (response.error) {
                            if (window.steamConsole) {
                                window.steamConsole.addLine("Lỗi: " + response.error, 'error');
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        if (window.steamConsole) {
                            window.steamConsole.addLine("Lỗi khi gửi yêu cầu dừng tất cả: " + (xhr.responseText || error), 'error');
                        }
                    }
                });
            });

            // Khởi tạo console nhập mới với hiệu suất tối ưu
            if (window.steamConsole === undefined && $('#steamcmd-console').length > 0) {
                window.steamConsole = new SteamCmdConsole('steamcmd-console', {
                    showInput: true,
                    steamGuardDetection: true,
                    bufferSize: 30,
                    renderDelay: 16,
                    onSteamGuardSubmit: function(code, profileId) {
                        connection.invoke("SubmitTwoFactorCode", parseInt(profileId || 1), code).catch(function(err) {
                            window.steamConsole.addLine("Lỗi khi gửi mã 2FA: " + err, 'error');
                        });
                    },
                    onInputSubmit: function(input, profileId) {
                        connection.invoke("SubmitConsoleInput", parseInt(profileId || 1), input).catch(function(err) {
                            window.steamConsole.addLine("Lỗi khi gửi dữ liệu: " + err, 'error');
                        });
                    }
                });
            }

            // Kiểm tra hiệu suất console
            const perfNow = window.performance.now();
            console.log("Thời gian load trang: " + perfNow + "ms");
        });
    </script>
}