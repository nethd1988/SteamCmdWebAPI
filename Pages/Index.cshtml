@page
@model IndexModel
@{
    ViewData["Title"] = "Quản lý cấu hình Steam AUTO";
}

<div class="container">
    <h1>Quản lý cấu hình SteamAUTO</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            @TempData["Success"]
        </div>
    }

    <!-- Form ẩn để tạo Anti-Forgery Token -->
    <form id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>

    <div class="mb-3">
        <a asp-page="./Create" class="btn btn-primary">Tạo cấu hình mới</a>
        <button id="runAllBtn" class="btn btn-success">Chạy tất cả</button>
        <button id="stopAllBtn" class="btn btn-danger">Dừng tất cả</button>
        <a asp-page="./Logs" class="btn btn-info">Xem Logs</a>
        <a asp-page="./Settings" class="btn btn-warning">Cài đặt</a>
        <a asp-page="./ServerSync" class="btn btn-primary">Đồng bộ Server</a>
        <button id="test2FABtn" class="btn btn-info">Test 2FA Popup</button>
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <h5>Logs</h5>
            <div id="logContainer" style="height: 300px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; background-color: black; color: limegreen;" data-profile-id="0"></div>
        </div>
    </div>

    <div class="mt-3">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Tên</th>
                    <th>App ID</th>
                    <th>Thư mục cài đặt</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var profile in Model.Profiles)
                {
                    <tr>
                        <td>@profile.Id</td>
                        <td>@profile.Name</td>
                        <td>@profile.AppID</td>
                        <td>@profile.InstallDirectory</td>
                        <td>
                            <button class="btn btn-sm btn-success run-btn" data-id="@profile.Id">Chạy</button>
                            <button class="btn btn-sm btn-danger stop-btn" data-id="@profile.Id">Dừng</button>
                            <a asp-page="./Edit" asp-route-id="@profile.Id" class="btn btn-sm btn-primary">Sửa</a>
                            <button class="btn btn-sm btn-danger delete-btn" data-id="@profile.Id">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="~/js/logHub.js"></script>

    <script>
        $(document).ready(function () {
            // Lấy Anti-Forgery Token từ form
            var token = $('input[name="__RequestVerificationToken"]').val();
            if (!token) {
                console.error("Không tìm thấy Anti-Forgery Token!");
            } else {
                console.log("Anti-Forgery Token đã được tải");
            }

            // Khởi tạo theo dõi logContainer để phát hiện yêu cầu 2FA sớm
            const logContainer = document.getElementById('logContainer');
            if (logContainer) {
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                            for (let i = 0; i < mutation.addedNodes.length; i++) {
                                const node = mutation.addedNodes[i];
                                if (node.textContent) {
                                    const text = node.textContent;
                                    // Kiểm tra đây có phải là yêu cầu 2FA không
                                    const is2FARequest =
                                        text.includes("STEAMGUARD_REQUEST_") ||
                                        text.includes("Steam Guard code:") ||
                                        text.includes("Two-factor code:") ||
                                        text.includes("Enter the current code") ||
                                        text.toLowerCase().includes("mobile authenticator") ||
                                        text.toLowerCase().includes("email address") ||
                                        (text.toLowerCase().includes("steam guard") && !text.includes("thành công"));

                                    if (is2FARequest) {
                                        const profileIdMatch = text.match(/STEAMGUARD_REQUEST_(\d+)/);
                                        let profileId = parseInt(logContainer.getAttribute("data-profile-id") || "1");

                                        if (profileIdMatch && profileIdMatch[1]) {
                                            profileId = parseInt(profileIdMatch[1]);
                                        }

                                        // Kiểm tra nếu đã có yêu cầu cho profile này
                                        if (window.logHubHelpers && window.logHubHelpers.pendingAuthRequests &&
                                            !window.logHubHelpers.pendingAuthRequests.has(profileId)) {

                                            console.log("Phát hiện yêu cầu 2FA từ MutationObserver: " + text);

                                            // Nếu showSteamGuardPopup đã được định nghĩa
                                            if (typeof showSteamGuardPopup === 'function') {
                                                window.logHubHelpers.pendingAuthRequests.add(profileId);

                                                // Hiển thị popup
                                                showSteamGuardPopup(profileId, function(code) {
                                                    window.logHubHelpers.pendingAuthRequests.delete(profileId);

                                                    if (code && typeof connection !== 'undefined') {
                                                        connection.invoke("SubmitTwoFactorCode", profileId, code)
                                                            .catch(function(err) {
                                                                console.error("Lỗi khi gửi mã 2FA: " + err);
                                                            });
                                                    }
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    });
                });

                observer.observe(logContainer, {
                    childList: true,
                    subtree: true
                });

                console.log("Đã thiết lập theo dõi log container cho 2FA");
            }

            // Test 2FA Popup
            $("#test2FABtn").click(function() {
                // Lấy profile ID đầu tiên hoặc một ID cố định
                const profileId = $(".run-btn").first().data("id") || 1;
                $("#logContainer").attr("data-profile-id", profileId);

                $.ajax({
                    url: "/Index?handler=Test2FA",
                    method: "POST",
                    data: { profileId: profileId },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function(response) {
                        console.log("Đã gửi yêu cầu test 2FA");
                    },
                    error: function(xhr, status, error) {
                        console.error("Lỗi khi test 2FA:", error);
                    }
                });
            });

            $(".run-btn").click(function () {
                const profileId = $(this).data("id");
                console.log("Gửi yêu cầu Run với profileId: " + profileId);
                // Cập nhật data-profile-id cho logContainer
                $("#logContainer").attr("data-profile-id", profileId);

                $.ajax({
                    url: "/Index?handler=Run",
                    method: "POST",
                    data: { profileId: profileId },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            // Bỏ alert thông báo thành công
                            console.log("Đã chạy cấu hình thành công");
                        } else {
                            console.error("Lỗi từ server: " + response.error);
                            alert("Lỗi: " + response.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Lỗi AJAX (Run): ", xhr, status, error);
                        console.log("Response Text: ", xhr.responseText);
                        alert("Lỗi: " + (xhr.responseText || "Không thể gửi yêu cầu."));
                    }
                });
            });

            $(".stop-btn").click(function () {
                const profileId = $(this).data("id");
                console.log("Gửi yêu cầu Stop với profileId: " + profileId);
                $.ajax({
                    url: "/Index?handler=Stop",
                    method: "POST",
                    data: { profileId: profileId },
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            console.log("Đã dừng cấu hình thành công");
                        } else {
                            console.error("Lỗi từ server: " + response.error);
                            alert("Lỗi: " + response.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Lỗi AJAX (Stop): ", xhr, status, error);
                        console.log("Response Text: ", xhr.responseText);
                        alert("Lỗi: " + (xhr.responseText || "Không thể gửi yêu cầu."));
                    }
                });
            });

            $(".delete-btn").click(function () {
                if (confirm("Bạn có chắc chắn muốn xóa cấu hình này?")) {
                    const profileId = $(this).data("id");
                    console.log("Gửi yêu cầu Delete với profileId: " + profileId);
                    $.ajax({
                        url: "/Index?handler=Delete",
                        method: "POST",
                        data: { profileId: profileId },
                        headers: {
                            "RequestVerificationToken": token
                        },
                        success: function (response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                console.error("Lỗi từ server: " + response.error);
                                alert("Lỗi: " + response.error);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Lỗi AJAX (Delete): ", xhr, status, error);
                            console.log("Response Text: ", xhr.responseText);
                            alert("Lỗi: " + (xhr.responseText || "Không thể gửi yêu cầu."));
                        }
                    });
                }
            });

            $("#runAllBtn").click(function () {
                console.log("Gửi yêu cầu RunAll");
                $.ajax({
                    url: "/Index?handler=RunAll",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            console.log("Đã chạy tất cả cấu hình thành công");
                        } else {
                            console.error("Lỗi từ server: " + response.error);
                            alert("Lỗi: " + response.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Lỗi AJAX (RunAll): ", xhr, status, error);
                        console.log("Response Text: ", xhr.responseText);
                        alert("Lỗi: " + (xhr.responseText || "Không thể gửi yêu cầu."));
                    }
                });
            });

            $("#stopAllBtn").click(function () {
                console.log("Gửi yêu cầu StopAll");
                $.ajax({
                    url: "/Index?handler=StopAll",
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            console.log("Đã dừng tất cả tiến trình thành công");
                        } else {
                            console.error("Lỗi từ server: " + response.error);
                            alert("Lỗi: " + response.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Lỗi AJAX (StopAll): ", xhr, status, error);
                        console.log("Response Text: ", xhr.responseText);
                        alert("Lỗi: " + (xhr.responseText || "Không thể gửi yêu cầu."));
                    }
                });
            });

            // Xử lý nút Escape để đóng popup nếu có
            $(document).keyup(function(e) {
                if (e.key === "Escape") {
                    $('#steam-guard-popup').remove();
                }
            });
        });
    </script>
}