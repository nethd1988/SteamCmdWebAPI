using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using SteamCmdWebAPI.Services;
using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;

namespace SteamCmdWebAPI.Pages
{
    public class LoginModel : PageModel
    {
        private readonly ILogger<LoginModel>
    _logger;
    private readonly UserService _userService;

    [BindProperty]
    public string Username { get; set; }

    [BindProperty]
    public string Password { get; set; }

    [BindProperty(SupportsGet = true)]
    public string ReturnUrl { get; set; }

    public string ErrorMessage { get; set; }
    public bool ShowRegister { get; set; }

    public LoginModel(ILogger<LoginModel>
        logger, UserService userService)
        {
        _logger = logger;
        _userService = userService;
        }

        public async Task<IActionResult>
            OnGetAsync()
            {
            // Xóa cookie hiện tại để đảm bảo đăng nhập mới
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);

            // Nếu đã đăng nhập, chuyển hướng đến trang chủ
            if (User.Identity?.IsAuthenticated == true)
            {
            return RedirectToPage("/Index");
            }

            // Kiểm tra nếu không có người dùng nào, hiển thị thông báo đăng ký
            if (!_userService.AnyUsers())
            {
            ShowRegister = true;
            _logger.LogInformation("Không có người dùng, hiện nút đăng ký");
            }
            else
            {
            ShowRegister = false; // Không hiển thị tùy chọn đăng ký nếu đã có người dùng
            _logger.LogInformation("Đã có người dùng, ẩn nút đăng ký");
            }

            // Nếu từ một trang khác chuyển đến, hiển thị thông báo
            if (!string.IsNullOrEmpty(ReturnUrl))
            {
            _logger.LogInformation("Được chuyển hướng từ: {ReturnUrl}", ReturnUrl);
            ErrorMessage = "Vui lòng đăng nhập để tiếp tục";
            }

            return Page();
            }

            public async Task<IActionResult>
                OnPostAsync()
                {
                try
                {
                if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
                {
                ErrorMessage = "Vui lòng nhập đầy đủ tên đăng nhập và mật khẩu";
                ShowRegister = !_userService.AnyUsers();
                return Page();
                }

                var user = await _userService.AuthenticateAsync(Username, Password);

                if (user == null)
                {
                ErrorMessage = "Tên đăng nhập hoặc mật khẩu không chính xác";
                ShowRegister = !_userService.AnyUsers();
                return Page();
                }

                var claims = new List<Claim>
                    {
                    new Claim(ClaimTypes.Name, user.Username),
                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                    new Claim(ClaimTypes.Role, user.IsAdmin ? "Admin" : "User"),
                    };

                    var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                    var authProperties = new AuthenticationProperties
                    {
                    IsPersistent = true,
                    ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7),
                    RedirectUri = ReturnUrl
                    };

                    await HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    new ClaimsPrincipal(claimsIdentity),
                    authProperties);

                    _logger.LogInformation("Người dùng {Username} đã đăng nhập thành công", Username);

                    // Chuyển hướng đến trang được yêu cầu ban đầu hoặc trang chủ
                    if (!string.IsNullOrEmpty(ReturnUrl) && Url.IsLocalUrl(ReturnUrl))
                    {
                    return Redirect(ReturnUrl);
                    }
                    else
                    {
                    return RedirectToPage("/Index");
                    }
                    }
                    catch (Exception ex)
                    {
                    _logger.LogError(ex, "Lỗi không xác định khi đăng nhập: {Message}", ex.Message);
                    ErrorMessage = "Đã xảy ra lỗi: " + ex.Message;
                    ShowRegister = !_userService.AnyUsers();
                    return Page();
                    }
                    }
                    }
                    }
